# note: this yaml is specifically designed for use with the non-scm pipelineSource feature.
# it will not be considered valid yaml if you add it as a pipelineSource in the pipelines UI.
configs:
  pipelineSourceName: &pipelineSourceName 'rpm_flow_again_test'
  # this is the project ID for the creating a source in the "all" context. to use other projects,
  # call the pipelines GET /projects api and from those results, you can find the project that
  # you want to use to add a new pipeline. Get the ID from that project and add use it here.
  projectId: &projectId '1'
projectId: *projectId
name: *pipelineSourceName
pipelinesYmlPropertyBag:
    # integrations must be created from the pipelines UI BEFORE adding this pipeline
    integrationDetails:
      # Artifactory
      artifactoryIntegrationName: &artIntName 'art'
      # Distribution
      distributionIntegrationName: &distIntName 'int_distribution'

    # Artifactory repositories should also be created in the Artifactory UI before executing this pipeline
    artifactoryRepositories:
      # the virtual repo the encompasses one or more remote RPM repositories.
      # this is the repository from which the curation flow will start
      virtualRepoName: &virtualRepoName 'pip-rpm-virtual'
      # this local repository is where curated artifacts from the virtual will be copied
      devRepoName: &devRepoName 'pip-rpm-dev-local'
      # the "production" repository to hold packages promoted from the dev repo
      prodRPMRepoName: &prodRepoName 'pip-rpm-prod-local'

    pipelinesDetails:
      # a name for the pipeline. Must be unique in the system
      curationName: &curationName 'rpm_curate'
      promotionName: &promotionName 'rpm_promote_and_publish'

    # resources must have unique names across the system, since they can be shared by
    # different pipelines
    resourceDetails:
      # this is for a "PropertyBag" resource.
      # at the end of the "curation" workflow, the list of copied files will be written
      # to this resource.  The "promote and distribute" workflow can then use this resource directly
      # as input.  It will contain a parameter called "resourceList" which will be a comma separated list
      # of file paths.
      ### example contents
      # {"resourceList": "pipe-rpm-virtual/a.rpm,pip-rpm-virtual/b.rpm"}
      curationResourceName: &curationResName 'curated_list'

      # the name of the BuildInfo resource to hold build information from the dev repository
      devRepoBuildInfoName: &devRepoBuildInfoName 'dev_repo_buildinfo'

      # the name of the BuildInfo resource to hold information after the dev build is promoted to production
      prodRepoBuildInfoName: &prodRepoBuildInfoName 'prod_repo_buildinfo'

      # the name of the ReleaseBundle resource that is created to contain the artifacts from file_list
      prodRepoBundleName: &prodRepoBundle 'prod_repo_bundle'

      # These resources contain the rules for Distribution. In this example
      # Distribution is split between 2 sites, so each site has its own "DistributionRule" resource
      # see https://www.jfrog.com/confluence/display/JFROG/DistributionRule
      primarySiteDistRuleName: &siteARuleName 'site_A_rule'
      secondarySiteDistRuleName: &siteBRuleName 'site_B_rule'


    promotion:
      # the friendly name of the build getting published to Artifactory
      buildName: &buildName 'rpm_build'


    releaseBundle:
      # The name of your release. This will appear in the Distribution UI
      releaseName: &releaseName 'pip_rpm_prod_bundle'


    distribution:
      primarySiteName: &siteAName 'siteA'

      secondarySiteName: &siteBName 'siteB'



    resources:
      - name: *curationResName
        type: PropertyBag
        configuration:
          resourceList: []

      - name: *devRepoBuildInfoName
        type: BuildInfo
        configuration:
          sourceArtifactory: *artIntName
      - name: *prodRepoBuildInfoName
        type: BuildInfo
        configuration:
          sourceArtifactory: *artIntName

      - name: *prodRepoBundle
        type: ReleaseBundle
        configuration:
          sourceDistribution: *distIntName
          name: *releaseName
          version: 1.0.${run_id}

      - name: *siteARuleName
        type: DistributionRule
        configuration:
          sourceDistribution: *distIntName
          serviceName: "*"
          siteName: *siteAName
          cityName: "*"
          countryCodes:
            - "*"
      - name: *siteBRuleName
        type: DistributionRule
        configuration:
          sourceDistribution: *distIntName
          serviceName: "*"
          siteName: *siteBName
          cityName: "*"
          countryCodes:
            - "*"


    pipelines:
      - name: *curationName
        configuration:
          jfrogCliVersion: 2
          environmentVariables:
            readOnly:
              fileList:
                default: ""
                allowCustom: true
                description: comma separated list of full artifactory paths from a remote repository
        steps:
          - name: cache_and_copy
            type: Bash
            configuration:
              integrations:
                - name: *artIntName
              outputResources:
                - name: *curationResName
              environmentVariables:
                artIntName: *artIntName
                devRepoName: *devRepoName
                curationResName: *curationResName
                virtualRepoName: *virtualRepoName
            execution:
              onExecute:
                - if [ -z "$fileList" ]; then echo "Must provide value for 'fileList' variable via custom trigger"; exit 1; fi
                - art_url="$(eval echo \"\${int_${artIntName}_url}\")"
                - art_apikey="$(eval echo \"\${int_${artIntName}_apikey}\")"
                - art_user="$(eval echo \"\${int_${artIntName}_username}\")"
                - newList=""
                - |
                  for item in ${fileList//,/ }; do
                    echo "processing file $item"
                    curl -u $art_user:$art_apikey -I $art_url/$item
                    newPath=${item#"$virtualRepoName"}
                    newPath="${devRepoName}${newPath}"
                    echo "copying to local at $newPath"
                    jf rt copy $item $devRepoName
                    newList="${newPath},${newList}"
                  done

              onSuccess:
                - write_output ${curationResName} "resourceList=${newList}"

      - name: *promotionName
        configuration:
          jfrogCliVersion: 2
          environmentVariables:
            readOnly:
              JFROG_CLI_BUILD_NAME: *buildName
              JFROG_CLI_BUILD_NUMBER: ${run_id}
              fileList:
                default: ""
                allowCustom: true
                description: comma separated list of full artifactory paths from a local repository
        steps:

          - name: create_dev_build
            type: Bash
            configuration:
              environmentVariables:
                devRepoName: *devRepoName
                virtualRepoName: *virtualRepoName
                artIntName: *artIntName
                buildInfoName: *devRepoBuildInfoName
              inputResources:
                - name: *curationResName
                  trigger: false
              outputResources:
                - name: *devRepoBuildInfoName
              integrations:
                - name: *artIntName
            execution:
              onExecute:
                - promotionList="$fileList"
                - if [ -z "$promotionList" ]; then promotionList="${resourceList}"; fi
                - if [ -z "$promotionList" ]; then echo "no file list found in env or resource. file list is required for promotion flow"; exit 1; fi
                - |
                  AQL1="items.find ({\"\$or\":[{"
                  AQL2=""
                  for item in ${promotionList//,/ }; do
                    echo "processing file $item"
                    IREPO=$(echo "$item" | cut -d "/" -f1)
                    IPATH=$(dirname "$item" | cut -d "/" -f 2-)
                    INAME=$(basename "$item")
                    AQL2="${AQL2}\"\$and\":[{\"repo\":\"${IREPO}\",\"path\":\"${IPATH}\", \"name\":\"${INAME}\"}],"
                    jf rt sp $item "build.name=${JFROG_CLI_BUILD_NAME};build.number=${JFROG_CLI_BUILD_NUMBER}"
                  done
                - |
                  AQL2=`echo ${AQL2} | rev | cut -c2- | rev`
                  AQL3='}],"type":"file"}).include("actual_md5", "name")'
                  AQL="${AQL1}${AQL2}${AQL3}"
                  RES=`jf rt curl -XPOST -H "Content-Type: text/plain" -d "$AQL" api/search/aql --silent | jq '[.results[] | .["md5"] = .actual_md5 | del(.actual_md5)]' `
                  BST=`date +"%Y-%m-%dT%H:%M:%S.000%z"`
                  BUILD_HEADER="{ \"version\":\"1.0.1\", \"name\":\"${JFROG_CLI_BUILD_NAME}\", \"number\":\"${JFROG_CLI_BUILD_NUMBER}\", \"type\":\"GENERIC\", \"started\":\"${BST}\", \"modules\": [{ \"id\":\"rpms\",\"type\":\"generic\", \"artifacts\":"
                  BUILD_FOOTER="}]}"
                  BUILDINFO="${BUILD_HEADER}$RES${BUILD_FOOTER}"
                  echo $BUILDINFO
                  jf rt curl -H 'Content-Type:application/json' -d "$BUILDINFO"  -XPUT /api/build?project=$project_key

              onSuccess:
                - write_output ${buildInfoName} "buildName=${JFROG_CLI_BUILD_NAME}" "buildNumber=${JFROG_CLI_BUILD_NUMBER}"

          - name: promote_build
            type: PromoteBuild
            configuration:
              requiresApproval: true
              copy: true
              targetRepository: *prodRepoName
              inputResources:
                - name: *devRepoBuildInfoName
              outputResources:
                - name: *prodRepoBuildInfoName

          - name: create_bundle
            type: CreateReleaseBundle
            configuration:
              sign: true
              releaseBundleName: *releaseName
              releaseBundleVersion: ${run_id}
              dryRun: false
              inputResources:
                - name: *prodRepoBuildInfoName
              outputResources:
                - name: *prodRepoBundle

          - name: distribute_site_a
            type: DistributeReleaseBundle
            configuration:
              dryRun: false
              inputResources:
                - name: *siteARuleName
                - name: *prodRepoBundle
                  trigger: false

          - name: distribute_site_b
            type: DistributeReleaseBundle
            configuration:
              dryRun: false
              inputResources:
                - name: *siteBRuleName
                - name: *prodRepoBundle
                  trigger: false

